// Code generated by MockGen. DO NOT EDIT.
// Source: ./watcher.go

// Package mock_watcher is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/catalogfi/orderbook/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetActiveOrders mocks base method.
func (m *MockStore) GetActiveOrders() ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveOrders")
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveOrders indicates an expected call of GetActiveOrders.
func (mr *MockStoreMockRecorder) GetActiveOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveOrders", reflect.TypeOf((*MockStore)(nil).GetActiveOrders))
}

// GetActiveSwaps mocks base method.
func (m *MockStore) GetActiveSwaps(chain model.Chain) ([]model.AtomicSwap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSwaps", chain)
	ret0, _ := ret[0].([]model.AtomicSwap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSwaps indicates an expected call of GetActiveSwaps.
func (mr *MockStoreMockRecorder) GetActiveSwaps(chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSwaps", reflect.TypeOf((*MockStore)(nil).GetActiveSwaps), chain)
}
// GetOrderBySwapID mocks base method.
func (m *MockStore) GetOrderBySwapID(swapID uint) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderBySwapID", swapID)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapByOCID mocks base method.
func (m *MockStore) SwapByOCID(ocID string) (model.AtomicSwap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapByOCID", ocID)
	ret0, _ := ret[0].(model.AtomicSwap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapByOCID indicates an expected call of SwapByOCID.
func (mr *MockStoreMockRecorder) SwapByOCID(ocID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapByOCID", reflect.TypeOf((*MockStore)(nil).SwapByOCID), ocID)
}

// UpdateOrder mocks base method.
func (m *MockStore) UpdateOrder(order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStoreMockRecorder) UpdateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStore)(nil).UpdateOrder), order)
}

// UpdateSwap mocks base method.
func (m *MockStore) UpdateSwap(swap *model.AtomicSwap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSwap", swap)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSwap indicates an expected call of UpdateSwap.
func (mr *MockStoreMockRecorder) UpdateSwap(swap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSwap", reflect.TypeOf((*MockStore)(nil).UpdateSwap), swap)
}
