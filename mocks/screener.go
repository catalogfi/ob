// Code generated by MockGen. DO NOT EDIT.
// Source: ./screener/screener.go

// Package mock_screener is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/catalogfi/orderbook/model"
	gomock "go.uber.org/mock/gomock"
)

// MockScreener is a mock of Screener interface.
type MockScreener struct {
	ctrl     *gomock.Controller
	recorder *MockScreenerMockRecorder
}

// MockScreenerMockRecorder is the mock recorder for MockScreener.
type MockScreenerMockRecorder struct {
	mock *MockScreener
}

// NewMockScreener creates a new mock instance.
func NewMockScreener(ctrl *gomock.Controller) *MockScreener {
	mock := &MockScreener{ctrl: ctrl}
	mock.recorder = &MockScreenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScreener) EXPECT() *MockScreenerMockRecorder {
	return m.recorder
}

// IsBlacklisted mocks base method.
func (m *MockScreener) IsBlacklisted(addrs map[string]model.Chain) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlacklisted", addrs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBlacklisted indicates an expected call of IsBlacklisted.
func (mr *MockScreenerMockRecorder) IsBlacklisted(addrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlacklisted", reflect.TypeOf((*MockScreener)(nil).IsBlacklisted), addrs)
}
