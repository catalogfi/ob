// Code generated by MockGen. DO NOT EDIT.
// Source: ./server.go

// Package mock_rest is a generated GoMock package.
package mocks

import (
	big "math/big"
	reflect "reflect"

	model "github.com/catalogfi/wbtc-garden/model"
	jwt "github.com/dgrijalva/jwt-go"
	gomock "go.uber.org/mock/gomock"
)

// MockServerStore is a mock of Store interface.
type MockServerStore struct {
	ctrl     *gomock.Controller
	recorder *MockServerStoreMockRecorder
}

// MockServerStoreMockRecorder is the mock recorder for MockServerStore.
type MockServerStoreMockRecorder struct {
	mock *MockServerStore
}

// NewMockServerStore creates a new mock instance.
func NewMockServerStore(ctrl *gomock.Controller) *MockServerStore {
	mock := &MockServerStore{ctrl: ctrl}
	mock.recorder = &MockServerStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerStore) EXPECT() *MockServerStoreMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockServerStore) CancelOrder(creator string, orderID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", creator, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockServerStoreMockRecorder) CancelOrder(creator, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockServerStore)(nil).CancelOrder), creator, orderID)
}

// CreateOrder mocks base method.
func (m *MockServerStore) CreateOrder(creator, sendAddress, receiveAddress, orderPair, sendAmount, receiveAmount, secretHash, userWalletBTCAddress string, config model.Config) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", creator, sendAddress, receiveAddress, orderPair, sendAmount, receiveAmount, secretHash, userWalletBTCAddress, config)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServerStoreMockRecorder) CreateOrder(creator, sendAddress, receiveAddress, orderPair, sendAmount, receiveAmount, secretHash, userWalletBTCAddress, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockServerStore)(nil).CreateOrder), creator, sendAddress, receiveAddress, orderPair, sendAmount, receiveAmount, secretHash, userWalletBTCAddress, config)
}

// FillOrder mocks base method.
func (m *MockServerStore) FillOrder(orderID uint, filler, sendAddress, receiveAddress string, config model.Network) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillOrder", orderID, filler, sendAddress, receiveAddress, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// FillOrder indicates an expected call of FillOrder.
func (mr *MockServerStoreMockRecorder) FillOrder(orderID, filler, sendAddress, receiveAddress, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillOrder", reflect.TypeOf((*MockServerStore)(nil).FillOrder), orderID, filler, sendAddress, receiveAddress, config)
}

// FilterOrders mocks base method.
func (m *MockServerStore) FilterOrders(maker, taker, orderPair, secretHash, sort string, status model.Status, minPrice, maxPrice, minAmount, maxAmount float64, page, perPage int, verbose bool) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOrders", maker, taker, orderPair, secretHash, sort, status, minPrice, maxPrice, minAmount, maxAmount, page, perPage, verbose)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOrders indicates an expected call of FilterOrders.
func (mr *MockServerStoreMockRecorder) FilterOrders(maker, taker, orderPair, secretHash, sort, status, minPrice, maxPrice, minAmount, maxAmount, page, perPage, verbose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOrders", reflect.TypeOf((*MockServerStore)(nil).FilterOrders), maker, taker, orderPair, secretHash, sort, status, minPrice, maxPrice, minAmount, maxAmount, page, perPage, verbose)
}

// GetOrder mocks base method.
func (m *MockServerStore) GetOrder(orderID uint) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderID)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockServerStoreMockRecorder) GetOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockServerStore)(nil).GetOrder), orderID)
}

// GetOrdersByAddress mocks base method.
func (m *MockServerStore) GetOrdersByAddress(address string) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByAddress", address)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByAddress indicates an expected call of GetOrdersByAddress.
func (mr *MockServerStoreMockRecorder) GetOrdersByAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByAddress", reflect.TypeOf((*MockServerStore)(nil).GetOrdersByAddress), address)
}

// ValueLockedByChain mocks base method.
func (m *MockServerStore) ValueLockedByChain(chain model.Chain, config model.Network) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueLockedByChain", chain, config)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValueLockedByChain indicates an expected call of ValueLockedByChain.
func (mr *MockServerStoreMockRecorder) ValueLockedByChain(chain, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueLockedByChain", reflect.TypeOf((*MockServerStore)(nil).ValueLockedByChain), chain, config)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockAuth) Verify(req model.VerifySiwe) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", req)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockAuthMockRecorder) Verify(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAuth)(nil).Verify), req)
}
