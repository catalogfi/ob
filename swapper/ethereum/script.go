package ethereum

import (
	"context"
	"encoding/hex"
	"fmt"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
	solsha3 "github.com/miguelmota/go-solidity-sha3"
	"github.com/susruth/wbtc-garden-server/swapper/ethereum/Typings/Create2Deployer"
)

const AtomicSwapBytecode = "61010060405234801561001157600080fd5b506040516106943803806106948339810160408190526100309161006f565b6001600160a01b039384166080529190921660a05260c09190915260e0526100b2565b80516001600160a01b038116811461006a57600080fd5b919050565b6000806000806080858703121561008557600080fd5b61008e85610053565b935061009c60208601610053565b6040860151606090960151949790965092505050565b60805160a05160c05160e0516105ac6100e8600039600060da015260006047015260006101060152600060b001526105ac6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631cff79cd14610030575b600080fd5b61004361003e3660046103a8565b610045565b005b7f00000000000000000000000000000000000000000000000000000000000000008180519060200120036100d8577f6f8762962912b8447c4d8ac0f29a32d350eb09ed6a66286ce34e88e95b4458e2816040516100a2919061049b565b60405180910390a16100d4827f0000000000000000000000000000000000000000000000000000000000000000610172565b5050565b7f000000000000000000000000000000000000000000000000000000000000000043111561012a576100d4827f0000000000000000000000000000000000000000000000000000000000000000610172565b60405162461bcd60e51b8152602060048201526018602482015277696e76616c696420736563726574206f722065787069727960401b60448201526064015b60405180910390fd5b604080513060248083019190915282518083039091018152604490910182526020810180516001600160e01b03166370a0823160e01b179052905160009182916001600160a01b038616916101c6916104ce565b6000604051808303816000865af19150503d8060008114610203576040519150601f19603f3d011682016040523d82523d6000602084013e610208565b606091505b50915091508161026e5760405162461bcd60e51b815260206004820152602b60248201527f41746f6d6963537761703a2045524332302062616c616e63654f66206469642060448201526a1b9bdd081cdd58d8d9595960aa1b6064820152608401610169565b60008180602001905181019061028491906104ea565b9050801561038657604080516001600160a01b038681166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908916916102e891906104ce565b6000604051808303816000865af19150503d8060008114610325576040519150601f19603f3d011682016040523d82523d6000602084013e61032a565b606091505b50915091508161034c5760405162461bcd60e51b815260040161016990610503565b8051156103835780806020019051810190610367919061054d565b6103835760405162461bcd60e51b815260040161016990610503565b50505b836001600160a01b0316ff5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156103bb57600080fd5b82356001600160a01b03811681146103d257600080fd5b915060208301356001600160401b03808211156103ee57600080fd5b818501915085601f83011261040257600080fd5b81358181111561041457610414610392565b604051601f8201601f19908116603f0116810190838211818310171561043c5761043c610392565b8160405282815288602084870101111561045557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b8381101561049257818101518382015260200161047a565b50506000910152565b60208152600082518060208401526104ba816040850160208701610477565b601f01601f19169190910160400192915050565b600082516104e0818460208701610477565b9190910192915050565b6000602082840312156104fc57600080fd5b5051919050565b6020808252602a908201527f41746f6d6963537761703a204552433230207472616e7366657220646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60006020828403121561055f57600080fd5b8151801515811461056f57600080fd5b939250505056fea26469706673582212202b8d77aa2161bbb551e1972397427a45feca191cfe6687032c929440954ab97364736f6c63430008120033"

func GetAddress(deployerAddr common.Address, callOps *bind.CallOpts, client *ethclient.Client, redeemer, refunder common.Address, secretHash []byte, expiryBlockNumber *big.Int) (common.Address, error) {
	instance, err := Create2Deployer.NewCreate2Deployer(deployerAddr, client)
	if err != nil {
		return *new(common.Address), err
	}
	var salt [32]byte
	copy(salt[:], secretHash)

	deploymentByteCode := getDeploymentByteCode(redeemer, refunder, salt, expiryBlockNumber)
	hash := solsha3.SoliditySHA3(deploymentByteCode)
	var hash32 [32]byte
	copy(hash32[:], hash)
	addr, err := instance.ComputeAddress(callOps, salt, hash32)
	if err != nil {
		panic(err)
	}
	return addr, nil

}

func Deploy(deployerAddr common.Address, auth *bind.TransactOpts, client *ethclient.Client, redeemer, refunder common.Address, secretHash []byte, expiryBlockNumber *big.Int) (common.Hash, error) {
	instance, err := Create2Deployer.NewCreate2Deployer(deployerAddr, client)
	if err != nil {
		return common.Hash{}, err
	}

	var salt [32]byte
	copy(salt[:], secretHash)

	deploymentByteCode := getDeploymentByteCode(redeemer, refunder, salt, expiryBlockNumber)

	tx, err := instance.Deploy(auth, big.NewInt(0), salt, deploymentByteCode)
	if tx == nil {
		return common.Hash{}, err
	}
	bind.WaitMined(context.Background(), client, tx)

	if err != nil {
		return common.Hash{}, err
	}
	fmt.Printf("Deploy tx sent: %s\n", tx.Hash().Hex())
	return tx.Hash(), nil
}

func getDeploymentByteCode(redeemer, refunder common.Address, salt [32]byte, expiryBlockNumber *big.Int) []byte {

	uint256Ty, _ := abi.NewType("uint256", "uint256", nil)
	bytes32Ty, _ := abi.NewType("bytes32", "bytes32", nil)
	addressTy, _ := abi.NewType("address", "address", nil)
	constructorParamsArguments := abi.Arguments{
		{
			Type: addressTy,
		},
		{
			Type: addressTy,
		},
		{
			Type: bytes32Ty,
		},
		{
			Type: uint256Ty,
		},
	}
	constructorParams, _ := constructorParamsArguments.Pack(
		redeemer,
		refunder,
		salt,
		expiryBlockNumber,
	)

	bytecode, _ := hex.DecodeString(AtomicSwapBytecode)
	deploymentByteCode := append(bytecode, constructorParams...)
	return deploymentByteCode

}
